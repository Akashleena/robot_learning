num_random_first_episodes: 4
result_directory: /data/kusanagi/cbk_6_20170125
learning_tasks:
    - scenario_name: corkscrew
      N: 50
      learner_params:
        server_name: localhost
        server_remote_command: rosrun aqua_rl aqua_learning_server.py
        max_evals: 50
        conv_thr: 1e-12
        min_method: 'L-BFGS-B'
        wrap_angles: true
        random_walk: true
        x0: [  0, 0, 0, 1.0, 0, 0, 0]
        S0: np.eye(len(learner_params['x0']))*(0.1**2)
        angle_dims: [0, 1, 2]
        H: 20.0
        discount: 1.0
        compiled_theano_fns: True
        use_empirical_x0: True
      plant_params:
        dt: 0.5
        params: null
        noise: np.diag(np.ones(len(learner_params['x0']))*0.01**2)       
      policy_params:
        m0: [  0, 0, 0, 1.0, 0, 0, 0]
        S0: np.eye(len(learner_params['x0']))*(0.1**2)
        n_inducing: 50
        maxU: [np.sqrt(np.pi/3), np.sqrt(np.pi/3), np.sqrt(np.pi/3), np.sqrt(np.pi/3), np.sqrt(np.pi/3), np.sqrt(np.pi/3), 
               np.pi/4, np.pi/4, np.pi/4, np.pi/4, np.pi/4, np.pi/4]
      dynmodel_params:
        n_inducing: 125
      cost_params:  
        width: 1.0
        target: [0, 0, 0, 1.0, 0.7, 0, 0]
        expl: 0.0
        #Q_diag:  [1.0, 0, 0, 0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] # Use this for angle-stabilization tasks
        Q_diag: [1.0, 1.0, 0, 0, 0, 0, 1.0, 1.0, 1.0, 1.0 ] # Use this for fixed roll-rate tasks        
    - scenario_name: bellyup
      N: 50
      learner_params:
        server_name: localhost
        server_remote_command: rosrun aqua_rl aqua_learning_server.py
        max_evals: 50
        conv_thr: 1e-12
        min_method: 'L-BFGS-B'
        wrap_angles: true
        random_walk: true
        x0: [  0, 0, 0, 1.0, 0, 0 ,0]
        S0: np.eye(len(learner_params['x0']))*(0.1**2)
        angle_dims: [0, 1, 2]
        H: 20.0
        discount: 1.0
        compiled_theano_fns: True
        use_empirical_x0: True
      plant_params:
        dt: 0.5
        params: null
        noise: np.diag(np.ones(len(learner_params['x0']))*0.01**2)       
      policy_params:
        m0: [  0, 0, 0, 1.0, 0, 0, 0]
        S0: np.eye(len(learner_params['x0']))*(0.1**2)
        n_inducing: 50
        maxU: [np.sqrt(np.pi/3), np.sqrt(np.pi/3), np.sqrt(np.pi/3), np.sqrt(np.pi/3), np.sqrt(np.pi/3), np.sqrt(np.pi/3), 
               np.pi/4, np.pi/4, np.pi/4, np.pi/4, np.pi/4, np.pi/4]
      dynmodel_params:
        n_inducing: 125
      cost_params:  
        width: 1.0
        target: [3.14159, 0, 0, 1.0, 0.0, 0, 0]
        expl: 0.0
        Q_diag:  [1.0, 0, 0, 0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] # Use this for angle-stabilization tasks
        #Q_diag: [1.0, 1.0, 0, 0, 0, 0, 1.0, 1.0, 1.0, 1.0 ] # Use this for fixed roll-rate tasks        
    - scenario_name: knife_edge
      N: 50
      learner_params:
        server_name: localhost
        server_remote_command: rosrun aqua_rl aqua_learning_server.py
        max_evals: 50
        conv_thr: 1e-12
        min_method: 'L-BFGS-B'
        wrap_angles: true
        random_walk: true
        x0: [  0, 0, 0, 1.0, 0, 0, 0]
        S0: np.eye(len(learner_params['x0']))*(0.1**2)
        angle_dims: [0, 1, 2]
        H: 20.0
        discount: 1.0
        compiled_theano_fns: True
        use_empirical_x0: True
      plant_params:
        dt: 0.5
        params: null
        noise: np.diag(np.ones(len(learner_params['x0']))*0.01**2)       
      policy_params:
        m0: [  0, 0, 0, 1.0, 0, 0, 0]
        S0: np.eye(len(learner_params['x0']))*(0.1**2)
        n_inducing: 50
        maxU: [np.sqrt(np.pi/3), np.sqrt(np.pi/3), np.sqrt(np.pi/3), np.sqrt(np.pi/3), np.sqrt(np.pi/3), np.sqrt(np.pi/3), 
               np.pi/4, np.pi/4, np.pi/4, np.pi/4, np.pi/4, np.pi/4]
      dynmodel_params:
        n_inducing: 125
      cost_params:  
        width: 1.0
        target: [1.57079632679, 0, 0, 1.0, 0.0, 0, 0]
        expl: 0.0
        Q_diag:  [1.0, 0, 0, 0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] # Use this for angle-stabilization tasks
        #Q_diag: [1.0, 1.0, 0, 0, 0, 0, 1.0, 1.0, 1.0, 1.0 ] # Use this for fixed roll-rate tasks        
