output_directory: /data/robot_learning/

default_task_params: &default_task_params
  initial_random_trials: 4
  horizon_secs: 20.0
  angle_dims: &default_angle_dims [0, 1, 2]
  random_walk: True
  wrap_angles: True

default_policy_params: &default_policy_params
  input_dims: 7
  maxU: !numpy "[np.sqrt(np.pi/3), np.sqrt(np.pi/3),
                 np.sqrt(np.pi/3), np.sqrt(np.pi/3),
                 np.sqrt(np.pi/3), np.sqrt(np.pi/3),
                 np.pi/4, np.pi/4, np.pi/4, np.pi/4, np.pi/4, np.pi/4]"
  sat: !!python/name:kusanagi.ghost.control.saturation.tanhSat

default_bnn_params: &default_bnn_params
  idims: 22 # non_angle_state_dims + 2*angle_state_dims + controls
  odims: 6 # state_dims

default_network_spec: &default_network_spec
  hidden_dims: !numpy '[200]*2'
  p: 0.1
  p_input: 0.0
  nonlinearities: !!python/name:kusanagi.ghost.regression.nonlinearities.rectify
  W_init: !!python/object/apply:lasagne.init.GlorotNormal {}
  dropout_class: !!python/name:kusanagi.ghost.regression.layers.DenseDropoutLayer
  build_fn: !!python/name:kusanagi.ghost.regression.dropout_mlp

default_plant: &default_plant_params
    dt: 1.0
    state0_dist: &state0_dist !!python/object/apply:kusanagi.utils.distributions.Gaussian
      kwds: &state0_dist_kwds
        mean: !numpy np.array([0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])
        cov: !numpy np.eye(7)*(0.1**2)
    name: 'AquaRobotEnv'

default_loss_fn: &default_loss_fn !!python/object/apply:kusanagi.shell.cost.build_distance_based_cost
  kwds: &default_loss_fn_kwds 
    loss_func: !!python/name:kusanagi.shell.cost.quadratic_saturating_loss 
    cw: 1.0
    expl: 0.0
    angle_dims: !!python/object/apply:theano.tensor.ivector ['angle_dims']

default_Q: 
  angle: &angle_Q !numpy np.diag([1.0, 0, 0, 0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) # Use this for angle-stabilization tasks
  roll: &rollrate_Q !numpy np.diag([1.0, 1.0, 0, 0, 0, 0, 1.0, 1.0, 1.0, 1.0]) # Use this for fixed roll-rate tasks 

#default_polopt_fn:
#  fn: !!python/object/apply:
#  args: []
#  kwargs: {}

tasks:
  corkscrew:
    <<: *default_task_params
    cost: &cs_cost !!python/object/apply:functools.partial
      args: [*default_loss_fn]
      kwds:
        angle_dims: *default_angle_dims
        target: [0, 0, 0, 1.0, 0.7, 0, 0]
        Q: *rollrate_Q
    policy: !!python/object/apply:kusanagi.ghost.control.NNPolicy
      kwds:
        <<: *default_policy_params
        network_spec:
          <<: *default_network_spec
    transition_model: !!python/object/apply:kusanagi.ghost.regression.BNN
      kwds:
        <<: *default_bnn_params
        network_spec:
          <<: *default_network_spec
          dropout_class: !!python/name:kusanagi.ghost.regression.layers.DenseLogNormalDropoutLayer
    plant:
      <<: *default_plant_params
      dt: 0.5
      loss_func: *cs_cost


