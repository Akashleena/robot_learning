
initial_random_trials: 4
output_directory: /data/robot_learning/

default_policy_params: &default_policy_params
  input_dims: 7
  angle_dims: [0, 1, 2]
  maxU: !numpy "[np.sqrt(np.pi/3), np.sqrt(np.pi/3),
                 np.sqrt(np.pi/3), np.sqrt(np.pi/3),
                 np.sqrt(np.pi/3), np.sqrt(np.pi/3),
                 np.pi/4, np.pi/4, np.pi/4, np.pi/4, np.pi/4, np.pi/4]"
  sat: !!python/name:kusanagi.ghost.control.saturation.tanhSat

default_bnn_params: &default_bnn_params
  idims: 22 # non_angle_state_dims + 2*angle_state_dims + controls
  odims: 6 # state_dims

default_network_spec: &default_network_spec
  hidden_dims: !numpy '[200]*2'
  p: 0.1
  p_input: 0.0
  nonlinearities: !!python/name:kusanagi.ghost.regression.nonlinearities.rectify
  W_init: !!python/object/apply:lasagne.init.GlorotNormal {}
  dropout_class: !!python/name:kusanagi.ghost.regression.layers.DenseDropoutLayer
  build_fn: !!python/name:kusanagi.ghost.regression.dropout_mlp

default_plant: &default_plant_params
    dt: 1.0
    state0_dist: &state0_dist !!python/object/apply:kusanagi.utils.distributions.Gaussian
      kwds: &state0_dist_kwds
        mean: !numpy np.array([0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0])
        cov: !numpy np.eye(7)*(0.1**2)
    

default_loss_func: &default_loss_fn !!python/object/apply:kusanagi.shell.cost.build_distance_based_cost
  kwds: &default_loss_fn_kwds 
    loss_func: !!python/name:kusanagi.shell.cost.quadratic_saturating_loss 
    cw: 1.0
    expl: 0.0
    angle_dims: !!python/object/apply:theano.tensor.ivector ['angle_dims']
